// Generated by CoffeeScript 1.12.4
var Keyboard, LayoutAnimation, Platform, ReactComponent, Style, View, parseOptions, type;

Style = require("react-validators").Style;

LayoutAnimation = require("LayoutAnimation");

ReactComponent = require("modx/lib/Component");

parseOptions = require("parseOptions");

Platform = require("Platform");

View = require("modx/lib/View");

Keyboard = require("./Keyboard");

type = ReactComponent("KeyboardAvoidingView");

type.defineValues({
  _frame: null
});

type.defineAnimatedValues({
  bottom: 0
});

type.defineBoundMethods({
  _onKeyboardChange: function(event) {
    var duration, easing, endCoordinates, height;
    duration = event.duration, easing = event.easing, endCoordinates = event.endCoordinates;
    height = this._relativeKeyboardHeight(endCoordinates);
    if (duration && easing) {
      type = LayoutAnimation.Types[easing] || "keyboard";
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: type
        }
      });
    }
    this.bottom.set(height);
  },
  _onLayout: function(event) {
    this._frame = event.nativeEvent.layout;
  }
});

type.defineListeners(function() {
  if (Platform.OS === "ios") {
    Keyboard.willChangeFrame(this._onKeyboardChange);
  } else {
    Keyboard.didHide(this._onKeyboardChange);
    Keyboard.didShow(this._onKeyboardChange);
  }
});

type.defineMethods({
  _relativeKeyboardHeight: function(keyboardFrame) {
    var y1, y2;
    if (!(keyboardFrame && this._frame)) {
      return 0;
    }
    y1 = Math.max(this._frame.y, keyboardFrame.screenY - this.props.verticalOffset);
    y2 = Math.min(this._frame.y + this._frame.height, keyboardFrame.screenY + keyboardFrame.height - this.props.verticalOffset);
    return Math.max(y2 - y1, 0);
  }
});

type.defineProps({
  contentStyle: Style,
  verticalOffset: Number.withDefault(0)
});

type.render(function() {
  var viewProps;
  viewProps = parseOptions(View, this.props, {
    key: "propTypes"
  });
  return View({
    mixins: [viewProps],
    onLayout: this._onLayout,
    children: View({
      style: [this.props.contentStyle, this.styles.content()],
      children: this.props.children
    })
  });
});

type.defineStyles({
  content: {
    cover: true,
    bottom: function() {
      return this.bottom;
    }
  }
});

module.exports = type.build();
